namespace Bonk;
using System;
using System.Runtime.CompilerServices;

internal unsafe partial class PlaneDecoder
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void DecodeSkipBlock(byte* sourcePtr, byte* targetPtr)
    {
        for (int i = 0; i < BlockSize; i++)
        {
            *((ulong*)targetPtr) = *((ulong*)sourcePtr);
            targetPtr += width;
            sourcePtr += width;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void DecodeMotionBlock(byte* sourcePtr, byte* targetPtr)
    {
        // This will cause unaligned access, maybe optimized versions should be used instead
        sourcePtr = unchecked(sourcePtr + bundleXMotion.Next() + bundleYMotion.Next() * width);
        DecodeSkipBlock(sourcePtr, targetPtr);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void DecodeFillBlock(byte* targetPtr)
    {
        // TODO: Check fill block in the case of signed colors
        ulong value = (ulong)bundleColors.Next();
        value |= (value << 8);
        value |= (value << 16);
        value |= (value << 32);
        for (int i = 0; i < BlockSize; i++)
        {
            *((ulong*)targetPtr) = value;
            targetPtr += width;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void DecodeRawBlock(byte* targetPtr)
    {
        for (int i = 0; i < BlockSize; i++)
        {
            bundleColors.Next(BlockSize).CopyTo(new Span<byte>(targetPtr, BlockSize));
            targetPtr += width;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void DecodePatternFill(byte* targetPtr)
    {
        uint color1 = (uint)bundleColors.Next();
        color1 |= color1 << 8;
        color1 |= color1 << 16;

        uint color2 = (uint)bundleColors.Next();
        color2 |= color2 << 8;
        color2 |= color2 << 16;

        for (int i = 0; i < BlockSize; i++)
        {
            var pattern = bundlePattern.Next();
            ((uint*)targetPtr)[0] = (color1 & Patterns[pattern & 0xF]) | (color2 & ~Patterns[pattern & 0xF]);
            ((uint*)targetPtr)[1] = (color1 & Patterns[pattern >> 4]) | (color2 & ~Patterns[pattern >> 4]);
            targetPtr += width;
        }
    }

    private static readonly uint[] Patterns = new uint[]
    {
        // basically 0-16 in binary with whole bytes as bits
        0xFFFFFFFF, 0xFFFFFF00, 0xFFFF00FF, 0xFFFF0000,
        0xFF00FFFF, 0xFF00FF00, 0xFF0000FF, 0xFF000000,
        0x00FFFFFF, 0x00FFFF00, 0x00FF00FF, 0x00FF0000,
        0x0000FFFF, 0x0000FF00, 0x000000FF, 0x00000000,
    };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void DecodeRunFillBlock(ref BitStream bitStream, byte* targetPtr)
    {
        byte* tmpBlock = stackalloc byte[64];
        DecodeRunFillBlockToTemp(ref bitStream, tmpBlock);
        CopyTempBlockToTarget(tmpBlock, targetPtr);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void DecodeRunFillBlockToTemp(ref BitStream bitStream, byte* targetPtr)
    {
        var pattern = GetRunPattern((int)bitStream.Read(4));
        var patternI = 0;
        while (patternI < BlockSize * BlockSize - 1)
        {
            var runLength = bundlePatternLengths.Next() + 1;
            if (bitStream.Read(1) == 0)
            {
                var colors = bundleColors.Next(runLength);
                for (int i = 0; i < runLength; i++, patternI++)
                    targetPtr[pattern[patternI]] = colors[i];
            }
            else
            {
                var color = (byte)bundleColors.Next();
                for (int i = 0; i < runLength; i++, patternI++)
                    targetPtr[pattern[patternI]] = color;
            }
        }
        if (patternI < BlockSize * BlockSize)
            targetPtr[pattern[patternI]] = (byte)bundleColors.Next();
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void CopyTempBlockToTarget(byte* tmpBlock, byte* targetPtr)
    {
        for (int i = 0; i < BlockSize; i++)
        {
            *((ulong*)targetPtr) = *((ulong*)tmpBlock);
            targetPtr += width;
            tmpBlock += BlockSize;
        }
    }

    private static ReadOnlySpan<byte> GetRunPattern(int patternI) =>
        RunPatterns.AsSpan(patternI * BlockSize * BlockSize, BlockSize * BlockSize);
    private static readonly byte[] RunPatterns = new byte[]
    {
        0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x39, 0x31,
        0x29, 0x21, 0x19, 0x11, 0x09, 0x01, 0x02, 0x0A, 0x12, 0x1A,
        0x22, 0x2A, 0x32, 0x3A, 0x3B, 0x33, 0x2B, 0x23, 0x1B, 0x13,
        0x0B, 0x03, 0x04, 0x0C, 0x14, 0x1C, 0x24, 0x2C, 0x34, 0x3C,
        0x3D, 0x35, 0x2D, 0x25, 0x1D, 0x15, 0x0D, 0x05, 0x06, 0x0E,
        0x16, 0x1E, 0x26, 0x2E, 0x36, 0x3E, 0x3F, 0x37, 0x2F, 0x27,
        0x1F, 0x17, 0x0F, 0x07, 0x3B, 0x3A, 0x39, 0x38, 0x30, 0x31,
        0x32, 0x33, 0x2B, 0x2A, 0x29, 0x28, 0x20, 0x21, 0x22, 0x23,
        0x1B, 0x1A, 0x19, 0x18, 0x10, 0x11, 0x12, 0x13, 0x0B, 0x0A,
        0x09, 0x08, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x0F, 0x0E, 0x0D, 0x0C, 0x14, 0x15, 0x16, 0x17, 0x1F, 0x1E,
        0x1D, 0x1C, 0x24, 0x25, 0x26, 0x27, 0x2F, 0x2E, 0x2D, 0x2C,
        0x34, 0x35, 0x36, 0x37, 0x3F, 0x3E, 0x3D, 0x3C, 0x19, 0x11,
        0x12, 0x1A, 0x1B, 0x13, 0x0B, 0x03, 0x02, 0x0A, 0x09, 0x01,
        0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x39, 0x31,
        0x29, 0x2A, 0x32, 0x3A, 0x3B, 0x33, 0x2B, 0x23, 0x22, 0x21,
        0x1D, 0x15, 0x16, 0x1E, 0x1F, 0x17, 0x0F, 0x07, 0x06, 0x0E,
        0x0D, 0x05, 0x04, 0x0C, 0x14, 0x1C, 0x24, 0x2C, 0x34, 0x3C,
        0x3D, 0x35, 0x2D, 0x2E, 0x36, 0x3E, 0x3F, 0x37, 0x2F, 0x27,
        0x26, 0x25, 0x03, 0x0B, 0x02, 0x0A, 0x01, 0x09, 0x00, 0x08,
        0x10, 0x18, 0x11, 0x19, 0x12, 0x1A, 0x13, 0x1B, 0x23, 0x2B,
        0x22, 0x2A, 0x21, 0x29, 0x20, 0x28, 0x30, 0x38, 0x31, 0x39,
        0x32, 0x3A, 0x33, 0x3B, 0x3C, 0x34, 0x3D, 0x35, 0x3E, 0x36,
        0x3F, 0x37, 0x2F, 0x27, 0x2E, 0x26, 0x2D, 0x25, 0x2C, 0x24,
        0x1C, 0x14, 0x1D, 0x15, 0x1E, 0x16, 0x1F, 0x17, 0x0F, 0x07,
        0x0E, 0x06, 0x0D, 0x05, 0x0C, 0x04, 0x18, 0x19, 0x10, 0x11,
        0x08, 0x09, 0x00, 0x01, 0x02, 0x03, 0x0A, 0x0B, 0x12, 0x13,
        0x1A, 0x1B, 0x1C, 0x1D, 0x14, 0x15, 0x0C, 0x0D, 0x04, 0x05,
        0x06, 0x07, 0x0E, 0x0F, 0x16, 0x17, 0x1E, 0x1F, 0x27, 0x26,
        0x2F, 0x2E, 0x37, 0x36, 0x3F, 0x3E, 0x3D, 0x3C, 0x35, 0x34,
        0x2D, 0x2C, 0x25, 0x24, 0x23, 0x22, 0x2B, 0x2A, 0x33, 0x32,
        0x3B, 0x3A, 0x39, 0x38, 0x31, 0x30, 0x29, 0x28, 0x21, 0x20,
        0x00, 0x01, 0x02, 0x03, 0x08, 0x09, 0x0A, 0x0B, 0x10, 0x11,
        0x12, 0x13, 0x18, 0x19, 0x1A, 0x1B, 0x20, 0x21, 0x22, 0x23,
        0x28, 0x29, 0x2A, 0x2B, 0x30, 0x31, 0x32, 0x33, 0x38, 0x39,
        0x3A, 0x3B, 0x04, 0x05, 0x06, 0x07, 0x0C, 0x0D, 0x0E, 0x0F,
        0x14, 0x15, 0x16, 0x17, 0x1C, 0x1D, 0x1E, 0x1F, 0x24, 0x25,
        0x26, 0x27, 0x2C, 0x2D, 0x2E, 0x2F, 0x34, 0x35, 0x36, 0x37,
        0x3C, 0x3D, 0x3E, 0x3F, 0x06, 0x07, 0x0F, 0x0E, 0x0D, 0x05,
        0x0C, 0x04, 0x03, 0x0B, 0x02, 0x0A, 0x09, 0x01, 0x00, 0x08,
        0x10, 0x18, 0x11, 0x19, 0x12, 0x1A, 0x13, 0x1B, 0x14, 0x1C,
        0x15, 0x1D, 0x16, 0x1E, 0x17, 0x1F, 0x27, 0x2F, 0x26, 0x2E,
        0x25, 0x2D, 0x24, 0x2C, 0x23, 0x2B, 0x22, 0x2A, 0x21, 0x29,
        0x20, 0x28, 0x31, 0x30, 0x38, 0x39, 0x3A, 0x32, 0x3B, 0x33,
        0x3C, 0x34, 0x3D, 0x35, 0x36, 0x37, 0x3F, 0x3E, 0x00, 0x01,
        0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x0F, 0x0E, 0x0D, 0x0C,
        0x0B, 0x0A, 0x09, 0x08, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
        0x16, 0x17, 0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x2F, 0x2E,
        0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x30, 0x31, 0x32, 0x33,
        0x34, 0x35, 0x36, 0x37, 0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A,
        0x39, 0x38, 0x00, 0x08, 0x09, 0x01, 0x02, 0x03, 0x0B, 0x0A,
        0x12, 0x13, 0x1B, 0x1A, 0x19, 0x11, 0x10, 0x18, 0x20, 0x28,
        0x29, 0x21, 0x22, 0x23, 0x2B, 0x2A, 0x32, 0x31, 0x30, 0x38,
        0x39, 0x3A, 0x3B, 0x33, 0x34, 0x3C, 0x3D, 0x3E, 0x3F, 0x37,
        0x36, 0x35, 0x2D, 0x2C, 0x24, 0x25, 0x26, 0x2E, 0x2F, 0x27,
        0x1F, 0x17, 0x16, 0x1E, 0x1D, 0x1C, 0x14, 0x15, 0x0D, 0x0C,
        0x04, 0x05, 0x06, 0x0E, 0x0F, 0x07, 0x18, 0x19, 0x10, 0x11,
        0x08, 0x09, 0x00, 0x01, 0x02, 0x03, 0x0A, 0x0B, 0x12, 0x13,
        0x1A, 0x1B, 0x1C, 0x1D, 0x14, 0x15, 0x0C, 0x0D, 0x04, 0x05,
        0x06, 0x07, 0x0E, 0x0F, 0x16, 0x17, 0x1E, 0x1F, 0x26, 0x27,
        0x2E, 0x2F, 0x36, 0x37, 0x3E, 0x3F, 0x3C, 0x3D, 0x34, 0x35,
        0x2C, 0x2D, 0x24, 0x25, 0x22, 0x23, 0x2A, 0x2B, 0x32, 0x33,
        0x3A, 0x3B, 0x38, 0x39, 0x30, 0x31, 0x28, 0x29, 0x20, 0x21,
        0x00, 0x08, 0x01, 0x09, 0x02, 0x0A, 0x03, 0x0B, 0x13, 0x1B,
        0x12, 0x1A, 0x11, 0x19, 0x10, 0x18, 0x20, 0x28, 0x21, 0x29,
        0x22, 0x2A, 0x23, 0x2B, 0x33, 0x3B, 0x32, 0x3A, 0x31, 0x39,
        0x30, 0x38, 0x3C, 0x34, 0x3D, 0x35, 0x3E, 0x36, 0x3F, 0x37,
        0x2F, 0x27, 0x2E, 0x26, 0x2D, 0x25, 0x2C, 0x24, 0x1F, 0x17,
        0x1E, 0x16, 0x1D, 0x15, 0x1C, 0x14, 0x0C, 0x04, 0x0D, 0x05,
        0x0E, 0x06, 0x0F, 0x07, 0x00, 0x08, 0x10, 0x18, 0x19, 0x1A,
        0x1B, 0x13, 0x0B, 0x03, 0x02, 0x01, 0x09, 0x11, 0x12, 0x0A,
        0x04, 0x0C, 0x14, 0x1C, 0x1D, 0x1E, 0x1F, 0x17, 0x0F, 0x07,
        0x06, 0x05, 0x0D, 0x15, 0x16, 0x0E, 0x24, 0x2C, 0x34, 0x3C,
        0x3D, 0x3E, 0x3F, 0x37, 0x2F, 0x27, 0x26, 0x25, 0x2D, 0x35,
        0x36, 0x2E, 0x20, 0x28, 0x30, 0x38, 0x39, 0x3A, 0x3B, 0x33,
        0x2B, 0x23, 0x22, 0x21, 0x29, 0x31, 0x32, 0x2A, 0x00, 0x08,
        0x09, 0x01, 0x02, 0x03, 0x0B, 0x0A, 0x13, 0x1B, 0x1A, 0x12,
        0x11, 0x10, 0x18, 0x19, 0x21, 0x20, 0x28, 0x29, 0x2A, 0x22,
        0x23, 0x2B, 0x33, 0x3B, 0x3A, 0x32, 0x31, 0x39, 0x38, 0x30,
        0x34, 0x3C, 0x3D, 0x35, 0x36, 0x3E, 0x3F, 0x37, 0x2F, 0x27,
        0x26, 0x2E, 0x2D, 0x2C, 0x24, 0x25, 0x1D, 0x1C, 0x14, 0x15,
        0x16, 0x1E, 0x1F, 0x17, 0x0E, 0x0F, 0x07, 0x06, 0x05, 0x0D,
        0x0C, 0x04, 0x18, 0x10, 0x08, 0x00, 0x01, 0x02, 0x03, 0x0B,
        0x13, 0x1B, 0x1A, 0x19, 0x11, 0x0A, 0x09, 0x12, 0x1C, 0x14,
        0x0C, 0x04, 0x05, 0x06, 0x07, 0x0F, 0x17, 0x1F, 0x1E, 0x1D,
        0x15, 0x0E, 0x0D, 0x16, 0x3C, 0x34, 0x2C, 0x24, 0x25, 0x26,
        0x27, 0x2F, 0x37, 0x3F, 0x3E, 0x3D, 0x35, 0x2E, 0x2D, 0x36,
        0x38, 0x30, 0x28, 0x20, 0x21, 0x22, 0x23, 0x2B, 0x33, 0x3B,
        0x3A, 0x39, 0x31, 0x2A, 0x29, 0x32, 0x00, 0x08, 0x09, 0x01,
        0x02, 0x0A, 0x12, 0x11, 0x10, 0x18, 0x19, 0x1A, 0x1B, 0x13,
        0x0B, 0x03, 0x07, 0x06, 0x0E, 0x0F, 0x17, 0x16, 0x15, 0x0D,
        0x05, 0x04, 0x0C, 0x14, 0x1C, 0x1D, 0x1E, 0x1F, 0x3F, 0x3E,
        0x36, 0x37, 0x2F, 0x2E, 0x2D, 0x35, 0x3D, 0x3C, 0x34, 0x2C,
        0x24, 0x25, 0x26, 0x27, 0x38, 0x30, 0x31, 0x39, 0x3A, 0x32,
        0x2A, 0x29, 0x28, 0x20, 0x21, 0x22, 0x23, 0x2B, 0x33, 0x3B,
        0x00, 0x01, 0x08, 0x09, 0x10, 0x11, 0x18, 0x19, 0x20, 0x21,
        0x28, 0x29, 0x30, 0x31, 0x38, 0x39, 0x3A, 0x3B, 0x32, 0x33,
        0x2A, 0x2B, 0x22, 0x23, 0x1A, 0x1B, 0x12, 0x13, 0x0A, 0x0B,
        0x02, 0x03, 0x04, 0x05, 0x0C, 0x0D, 0x14, 0x15, 0x1C, 0x1D,
        0x24, 0x25, 0x2C, 0x2D, 0x34, 0x35, 0x3C, 0x3D, 0x3E, 0x3F,
        0x36, 0x37, 0x2E, 0x2F, 0x26, 0x27, 0x1E, 0x1F, 0x16, 0x17,
        0x0E, 0x0F, 0x06, 0x07
    };
}
